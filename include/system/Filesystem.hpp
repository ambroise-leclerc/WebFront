/// @date 01/03/2022 22:39:42
/// @author Ambroise Leclerc
/// @brief Provides access to local or virtual file system.
#pragma once

#include <array>
#include <bit>
#include <cstring>
#include <optional>
#include <sstream>
#include <string_view>

namespace webfront {

namespace filesystem {

template<typename T, typename Buffer>
concept File = requires(T f, Buffer buffer, size_t size) { f.read(buffer, size); };

template<typename T>
concept Filesystem = requires(T fs, std::string_view filename) { T::open(filename); };


template<typename Data>
class Streamer {
public:
    struct istream {
        size_t readIndex, lastReadCount;
        bool eofBit, badBit;

        size_t tellg() const { return readIndex; }
        size_t gcount() const { return lastReadCount; }
        bool eof() const { return eofBit; }
        bool bad() const { return badBit; }
        bool fail() const { return false; }
        explicit operator bool() const { return !fail(); }
        bool operator!() const { return eof() || bad(); }
    };

    static istream& read(char* s, size_t count) { return get(s, count); }
    static istream& get(char* s, size_t count) {
        static istream stream{.readIndex =0, .lastReadCount =0, .eofBit = false, .badBit =false};
        constexpr auto bytesPerInt = sizeof(decltype(Data::data)::size_type);
        static std::array<char, bytesPerInt> chunk;
        
        stream.lastReadCount = 0;
        if (stream.eof()) return stream;
        for (size_t index = 0; index < count; ++index) {
            if (stream.eof()) {
                stream.badBit = true;
                stream.lastReadCount = index;
                return stream;
            }
            if (stream.readIndex % bytesPerInt == 0) memcpy(chunk.data(), &Data::data[stream.readIndex / bytesPerInt], bytesPerInt);
            size_t readIndex = std::endian::native == std::endian::big ? stream.readIndex % bytesPerInt : bytesPerInt - 1 - (stream.readIndex % bytesPerInt);
            s[index] = chunk[readIndex];

            stream.readIndex++;
            if (stream.readIndex == Data::data_size) stream.eofBit = true;
        }
        stream.lastReadCount = count;
        return stream;
    }
};

class IndexFS {
public:
    class File {
    public:
        enum FileId { index, favicon, webfront };

        File(FileId id) : fileId(id) {}
        size_t read(auto& buffer) { return read(buffer, buffer.size()); }
        size_t read(auto& buffer, size_t size) {
            switch (fileId) {
            case index:
                return indexHtml.read(reinterpret_cast<char*>(buffer.data()), size).gcount(); 
            case favicon:
                return Streamer<WebfrontIco>::read(reinterpret_cast<char*>(buffer.data()), size).gcount();
            case webfront:
                return Streamer<WebFrontJs0_1_1>::read(reinterpret_cast<char*>(buffer.data()), size).gcount();
            }
            return 0;
        }

    private:
        FileId fileId;

        std::stringstream indexHtml { 
            "<!DOCTYPE html>\n"
            "<html>\n"
            "<head>\n  <meta charset=\"utf-8\">\n  <title>Webfront</title>\n</head>\n"
            "<script src=\"WebFront.js\"></script>"
            "</html>\n"};

        struct WebfrontIco {
            static constexpr size_t data_size{766};
            static constexpr std::array<uint64_t, 96> data{
              0x0000010001002020, 0x100001000400e802, 0x0000160000002800, 0x0000200000004000, 0x0000010004000000,
              0x0000000000000000, 0x0000000000001000, 0x0000000000003834, 0x3200e09b1200ead9, 0xb0006c676200ae9f,
              0x7500e6b24200524e, 0x4800e1a429009d7b, 0x2f00bfbab900857e, 0x6f00fbf8ef00b887, 0x2000866d3800e8c2,
              0x6d0063594600bb23, 0x0000000000000000, 0x0000000032bbb900, 0x0000000000000000, 0x00000000009b2000,
              0x0000000000000000, 0x000000000002a000, 0x000000006d8cc8d6, 0x0000000000036000, 0x006000d111717111,
              0x1d00000000000000, 0x00006c1777777777, 0x7110000000000000, 0x0006117777777777, 0x7777f00000000000,
              0x00f1777777777777, 0x77771f0000000000, 0x0017777171717177, 0x7777710000000000, 0x0117111717171717,
              0x1717171000000060, 0xf111711111111111, 0x1171111f00600000, 0xc111111111111111, 0x1111111100000600,
              0x1111111217be7e1b, 0xe71111116000000d, 0x111111eb7ebb111b, 0x21111111d000060d, 0x111111227b2b5112,
              0x211111118060000c, 0x111115b5eb72211b, 0xb2251111c0000668, 0x11111221b21eb11b, 0x2ee5111180600608,
              0x11117be5b711be1b, 0xe1111111c060066d, 0x1111eb1221112b1b, 0xe7111111d660066f, 0x1111be7be1117b5b,
              0xbbbbb111f0600666, 0x1111111111111111, 0x1111111166600666, 0xd717171717171711, 0x7171771d66600f66,
              0x6777777177717777, 0x1777717666606666, 0x6377777777777777, 0x7777773666f006ff, 0xf685575777575777,
              0x57775a6f6f6666f6, 0xff3a575555757555, 0x5555affff6f066ff, 0x3f3fa55555555557, 0x555af33636f6f6ff,
              0xf333334555555555, 0xea333333636faff3, 0xf3333333a445444a, 0x3a33333ff664b36f, 0xf333a3aaaaaaaaaa,
              0xaa3a3333f332b243, 0x363f333333333333, 0x33333fffaa2bbbb9, 0x9999999999999999, 0x999999999bbbc000,
              0x0003800000010000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
              0x0000000000000002, 0x1000001310000005, 0x0000002418000008, 0x9000004890000040, 0x500000905f800000,
              0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000800000008000,
              0x0001e00000070000};
        };

        struct WebFrontJs0_1_1 {
            static constexpr size_t data_size{ 4596 };
            static constexpr std::array<uint64_t, 575> data {
                0x2275736520737472, 0x696374223b766172, 0x2077656266726f6e, 0x743b2866756e6374, 0x696f6e2877297b63, 0x6f6e737420453d7b, 0x6d616a6f723a302c, 0x6d696e6f723a312c,
                0x70617463683a317d, 0x3b66756e6374696f, 0x6e206728297b6c65, 0x7420723d6e657720, 0x55696e7433324172, 0x726179285b323835, 0x3231323932375d29, 0x2c653d6e65772055,
                0x696e743841727261, 0x792872293b726574, 0x75726e20655b305d, 0x3d3d3d3235353f61, 0x2e6c6974746c653a, 0x655b305d3d3d3d31, 0x373f612e6269673a, 0x612e6c6974746c65,
                0x2b612e6269677d6c, 0x657420613b286675, 0x6e6374696f6e2872, 0x297b725b722e6c69, 0x74746c653d305d3d, 0x226c6974746c6522, 0x2c725b722e626967, 0x3d315d3d22626967,
                0x222c725b722e6e61, 0x746976653d672829, 0x5d3d226e61746976, 0x65227d2928617c7c, 0x28613d7b7d29293b, 0x6c657420683b2866, 0x756e6374696f6e28, 0x72297b725b722e75,
                0x6e696e697469616c, 0x697a65643d305d3d, 0x22756e696e697469, 0x616c697a6564222c, 0x725b722e68616e64, 0x7368616b696e673d, 0x315d3d2268616e64, 0x7368616b696e6722,
                0x2c725b722e6c696e, 0x6b65643d325d3d22, 0x6c696e6b6564227d, 0x2928687c7c28683d, 0x7b7d29293b636c61, 0x737320707b636f6e, 0x7374727563746f72, 0x28297b636f6e736f,
                0x6c652e6c6f672822, 0x6e65746c61796572, 0x20636f6e73747275, 0x6374656422292c74, 0x6869732e72656376, 0x4275666665723d6e, 0x6577204172726179, 0x4275666665722835,
                0x3132292c74686973, 0x2e726563764d7367, 0x3d6e65772055696e, 0x7438417272617928, 0x746869732e726563, 0x7642756666657229, 0x2c746869732e7365, 0x6e64427566666572,
                0x3d6e657720417272, 0x6179427566666572, 0x28353132292c7468, 0x69732e73656e644d, 0x73673d6e65772055, 0x696e743841727261, 0x7928746869732e73, 0x656e644275666665,
                0x72292c746869732e, 0x736f636b65743d6e, 0x657720576562536f, 0x636b657428227773, 0x3a2f2f6c6f63616c, 0x686f73743a222b77, 0x696e646f772e6c6f, 0x636174696f6e2e70,
                0x6f72742c22576562, 0x46726f6e745f302e, 0x3122292c74686973, 0x2e736f636b65742e, 0x6f6e6f70656e3d65, 0x3d3e7b636f6e736f, 0x6c652e6c6f672822, 0x77656266726f6e74,
                0x20636f6e6e656374, 0x696f6e206f70656e, 0x656422292c746869, 0x732e736f636b6574, 0x2e62696e61727954, 0x7970653d22617272, 0x6179627566666572, 0x222c746869732e6f,
                0x6e4f70656e28297d, 0x2c746869732e736f, 0x636b65742e6f6e63, 0x6c6f73653d653d3e, 0x7b652e776173436c, 0x65616e3f636f6e73, 0x6f6c652e6c6f6728, 0x605b636c6f73655d,
                0x20436f6e6e656374, 0x696f6e20636c6f73, 0x656420636c65616e, 0x6c792c20636f6465, 0x3d247b652e636f64, 0x657d20726561736f, 0x6e3d247b652e7265, 0x61736f6e7d60293a,
                0x636f6e736f6c652e, 0x6c6f6728225b636c, 0x6f73655d20436f6e, 0x6e656374696f6e20, 0x6469656422297d2c, 0x746869732e736f63, 0x6b65742e6f6e6572, 0x726f723d653d3e7b,
                0x636f6e736f6c652e, 0x6c6f6728605b6572, 0x726f725d20247b65, 0x7d60297d2c746869, 0x732e736f636b6574, 0x2e6f6e6d65737361, 0x67653d653d3e7b6c, 0x657420743d6e6577,
                0x2044617461566965, 0x7728652e64617461, 0x293b737769746368, 0x28742e6765745569, 0x6e7438283029297b, 0x6361736520313a74, 0x6869732e73746174, 0x653d3d3d682e6861,
                0x6e647368616b696e, 0x6726262874686973, 0x2e73746174653d68, 0x2e6c696e6b65642c, 0x746869732e6c6974, 0x746c65456e646961, 0x6e3d742e67657455, 0x696e74382831293d,
                0x3d612e6c6974746c, 0x652c636f6e736f6c, 0x652e6c6f67282257, 0x65624c696e6b206e, 0x65676f6369617465, 0x64203a2073657276, 0x657220697320222c, 0x746869732e6c6974,
                0x746c65456e646961, 0x6e3f226c6974746c, 0x6520656e6469616e, 0x223a226269672065, 0x6e6469616e222929, 0x3b627265616b3b63, 0x61736520323a7b6c, 0x657420693d742e67,
                0x657455696e743828, 0x31292c6e3d742e67, 0x657455696e743136, 0x2832293b74686973, 0x2e74657874436f6d, 0x6d616e6428692c6e, 0x65772055696e7438, 0x417272617928652e,
                0x646174612c342c6e, 0x29297d627265616b, 0x3b6361736520333a, 0x7b6c657420693d74, 0x2e67657455696e74, 0x382831292c6e3d74, 0x2e67657455696e74, 0x333228342c746869,
                0x732e6c6974746c65, 0x456e6469616e293b, 0x7472797b74686973, 0x2e63616c6c4a7346, 0x756e6374696f6e28, 0x692c6e6577204461, 0x7461566965772865, 0x2e646174612c382c,
                0x6e29297d63617463, 0x68286f297b636f6e, 0x736f6c652e657272, 0x6f72282257697468, 0x2063616c6c4a533a, 0x20222b6f297d7d62, 0x7265616b7d7d2c74, 0x6869732e73746174,
                0x653d682e756e696e, 0x697469616c697a65, 0x642c746869732e6c, 0x6974746c65456e64, 0x69616e3d21317d74, 0x657874436f6d6d61, 0x6e6428652c74297b, 0x6c657420733d6e65,
                0x7720546578744465, 0x636f646572282275, 0x74662d3822292e64, 0x65636f6465287429, 0x3b73776974636828, 0x65297b6361736520, 0x303a636f6e736f6c, 0x652e6c6f67287329,
                0x3b627265616b3b63, 0x61736520313a7b6c, 0x657420693d646f63, 0x756d656e742e6372, 0x65617465456c656d, 0x656e742822736372, 0x69707422293b692e, 0x746578743d732c64,
                0x6f63756d656e742e, 0x626f64792e617070, 0x656e644368696c64, 0x2869297d7d7d6465, 0x636f646550617261, 0x6d65746572732865, 0x2c742c733d30297b, 0x6c657420693d5b5d,
                0x2c6e3d733b666f72, 0x286c6574206f3d30, 0x3b6f3c653b2b2b6f, 0x297b6c657420633d, 0x742e67657455696e, 0x7438286e293b7377, 0x697463682863297b, 0x6361736520313a69,
                0x2e70757368282130, 0x292c6e2b3d313b62, 0x7265616b3b636173, 0x6520323a692e7075, 0x7368282131292c6e, 0x2b3d313b62726561, 0x6b3b636173652033, 0x3a692e7075736828,
                0x742e676574466c6f, 0x61743634286e2b31, 0x2c746869732e6c69, 0x74746c65456e6469, 0x616e29292c6e2b3d, 0x393b627265616b3b, 0x6361736520343a63, 0x61736520353a7b6c,
                0x6574206c3d633d3d, 0x352c643d6c3f742e, 0x67657455696e7431, 0x36286e2b312c7468, 0x69732e6c6974746c, 0x65456e6469616e29, 0x3a742e6765745569, 0x6e7438286e2b3129,
                0x2c753d6e2b286c3f, 0x333a32292c623d6e, 0x6577205465787444, 0x65636f6465722822, 0x7574662d3822292e, 0x6465636f64652874, 0x2e6275666665722e, 0x736c69636528742e,
                0x627974654f666673, 0x65742b752c742e62, 0x7974654f66667365, 0x742b752b6429293b, 0x692e707573682862, 0x292c6e3d752b647d, 0x627265616b3b6361, 0x73652031383a7b6c,
                0x6574206c3d742e67, 0x657455696e743828, 0x6e2b31292c643d74, 0x6869732e6465636f, 0x6465506172616d65, 0x74657273286c2c74, 0x2c6e2b32293b692e, 0x7075736828645b30,
                0x5d292c6e2b3d322b, 0x645b315d7d7d7d72, 0x657475726e5b692c, 0x6e2d735d7d63616c, 0x6c4a7346756e6374, 0x696f6e28652c7429, 0x7b6c65745b732c69, 0x5d3d746869732e64,
                0x65636f6465506172, 0x616d657465727328, 0x312c74292c5b6e5d, 0x3d746869732e6465, 0x636f646550617261, 0x6d65746572732865, 0x2d312c742c69293b, 0x7472797b6d28735b,
                0x305d2c77696e646f, 0x772c2e2e2e6e297d, 0x6361746368286f29, 0x7b7468726f77206e, 0x6577204572726f72, 0x282243616c6c696e, 0x672066756e637469, 0x6f6e20222b735b30,
                0x5d2b22203a20222b, 0x6f297d7d77726974, 0x652865297b737769, 0x7463682874686973, 0x2e73656e644d7367, 0x5b305d3d652c6529, 0x7b6361736520303a, 0x746869732e73656e,
                0x644d73675b315d3d, 0x612e6e6174697665, 0x2c746869732e7374, 0x6174653d682e6861, 0x6e647368616b696e, 0x672c746869732e73, 0x6f636b65742e7365, 0x6e6428746869732e,
                0x73656e644d73672e, 0x736c69636528302c, 0x3229297d7d7d636c, 0x6173732079206578, 0x74656e647320707b, 0x636f6e7374727563, 0x746f7228297b7375, 0x70657228292c636f,
                0x6e736f6c652e6c6f, 0x6728225765624672, 0x6f6e7420636f6e73, 0x7472756374656420, 0x3a20656e6469616e, 0x20222b61297d6370, 0x7046756e6374696f, 0x6e2865297b726574,
                0x75726e2074686973, 0x2e63707046756e63, 0x74696f6e42696e64, 0x65722e62696e6428, 0x746869732c65297d, 0x63707046756e6374, 0x696f6e42696e6465, 0x7228652c2e2e2e74,
                0x297b6c657420693d, 0x303b692b3d746869, 0x732e636f6d707574, 0x65506172616d6574, 0x657253697a652865, 0x293b666f72286c65, 0x74206c3d303b6c3c, 0x742e6c656e677468,
                0x3b2b2b6c29692b3d, 0x746869732e636f6d, 0x7075746550617261, 0x6d6574657253697a, 0x6528745b6c5d293b, 0x636f6e736f6c652e, 0x6c6f672822706179, 0x6c6f61642073697a,
                0x652077696c6c2062, 0x6520222b69293b6c, 0x6574206e3d6e6577, 0x2041727261794275, 0x6666657228692b38, 0x292c6f3d6e657720, 0x4461746156696577, 0x286e293b6f2e7365,
                0x7455696e74382830, 0x2c33292c6f2e7365, 0x7455696e74382831, 0x2c742e6c656e6774, 0x682b31292c6f2e73, 0x657455696e743828, 0x322c30292c6f2e73, 0x657455696e743828,
                0x332c30292c6f2e73, 0x657455696e743332, 0x28342c692c746869, 0x732e6c6974746c65, 0x456e6469616e293b, 0x6c657420633d383b, 0x632b3d746869732e, 0x656e636f64655061,
                0x72616d6574657228, 0x652c6e6577204461, 0x746156696577286e, 0x2c6329293b666f72, 0x286c6574206c3d30, 0x3b6c3c742e6c656e, 0x6774683b2b2b6c29, 0x632b3d746869732e,
                0x656e636f64655061, 0x72616d6574657228, 0x745b6c5d2c6e6577, 0x2044617461566965, 0x77286e2c6329292c, 0x636f6e736f6c652e, 0x6c6f67282e2e2e6e, 0x65772055696e7438,
                0x4172726179286e29, 0x293b746869732e73, 0x6f636b65742e7365, 0x6e64286e297d636f, 0x6d70757465506172, 0x616d657465725369, 0x7a652865297b7377, 0x6974636828747970,
                0x656f662065297b63, 0x61736522626f6f6c, 0x65616e223a726574, 0x75726e20313b6361, 0x7365226e756d6265, 0x72223a7265747572, 0x6e20393b63617365, 0x22737472696e6722,
                0x3a7b6c657420743d, 0x6e65772054657874, 0x456e636f64657228, 0x292e656e636f6465, 0x2865292e6c656e67, 0x74683b7265747572, 0x6e20742b28743c32, 0x35363f323a33297d,
                0x63617365226f626a, 0x656374223a696628, 0x41727261792e6973, 0x4172726179286529, 0x297b6c657420743d, 0x323b72657475726e, 0x20652e666f724561, 0x636828733d3e742b,
                0x3d746869732e636f, 0x6d70757465506172, 0x616d657465725369, 0x7a65287329292c74, 0x7d64656661756c74, 0x3a7468726f77206e, 0x6577204572726f72, 0x2822547970654572,
                0x726f72203a202722, 0x2b747970656f6620, 0x652b222720697320, 0x616e20756e737570, 0x706f727465642074, 0x79706522297d7d65, 0x6e636f6465506172, 0x616d657465722865,
                0x2c742c733d30297b, 0x7377697463682874, 0x7970656f66206529, 0x7b63617365227374, 0x72696e67223a7b6c, 0x657420693d6e6577, 0x2054657874456e63, 0x6f64657228292e65,
                0x6e636f6465286529, 0x2c6e3d303b696628, 0x692e6c656e677468, 0x3c32353629742e73, 0x6574496e74382873, 0x2b302c34292c742e, 0x736574496e743828, 0x732b312c692e6c65,
                0x6e677468292c6e3d, 0x323b656c73652069, 0x6628692e6c656e67, 0x74683c3635353336, 0x29742e736574496e, 0x743828732b302c35, 0x292c742e73657449, 0x6e74313628732b31,
                0x2c692e6c656e6774, 0x682c746869732e6c, 0x6974746c65456e64, 0x69616e292c6e3d33, 0x3b656c7365207468, 0x726f77206e657720, 0x4572726f72282252, 0x616e67654572726f,
                0x723a2063616e6e6f, 0x7420656e636f6465, 0x20737472696e6720, 0x6f66206d6f726520, 0x7468616e2036346b, 0x42206f6620646174, 0x612e22293b726574, 0x75726e20692e666f,
                0x7245616368286675, 0x6e6374696f6e286f, 0x2c63297b742e7365, 0x74496e743828732b, 0x6e2b632c6f297d29, 0x2c6e2b692e6c656e, 0x6774687d63617365, 0x22626f6f6c65616e,
                0x223a72657475726e, 0x20742e736574496e, 0x743828732b302c65, 0x3f313a32292c313b, 0x63617365226e756d, 0x626572223a726574, 0x75726e20742e7365, 0x74496e743828732b,
                0x302c33292c742e73, 0x6574466c6f617436, 0x3428732b312c652c, 0x746869732e6c6974, 0x746c65456e646961, 0x6e292c393b636173, 0x65226f626a656374, 0x223a696628417272,
                0x61792e6973417272, 0x6179286529297b74, 0x2e736574496e7438, 0x28732b302c313829, 0x2c742e736574496e, 0x743828732b312c65, 0x2e6c656e67746829, 0x3b6c657420693d32,
                0x3b72657475726e20, 0x652e666f72456163, 0x68286e3d3e692b3d, 0x746869732e656e63, 0x6f6465506172616d, 0x65746572286e2c74, 0x2c6929292c697d63, 0x6f6e736f6c652e6c,
                0x6f672865293b6465, 0x6661756c743a7468, 0x726f77206e657720, 0x4572726f72282254, 0x7970654572726f72, 0x203a2027222b7479, 0x70656f6620652b22, 0x2720697320616e20,
                0x756e737570706f72, 0x7465642074797065, 0x22297d7d6f6e4f70, 0x656e28297b746869, 0x732e777269746528, 0x30297d7d772e5765, 0x6246726f6e743d79, 0x3b66756e6374696f,
                0x6e206d28722c652c, 0x2e2e2e74297b7661, 0x7220733d722e7370, 0x6c697428222e2229, 0x3b6c657420693d73, 0x5b732e6c656e6774, 0x682d315d3b732e70, 0x6f7028293b666f72,
                0x28766172206e3d30, 0x3b6e3c732e6c656e, 0x6774683b6e2b2b29, 0x653d655b735b6e5d, 0x5d3b72657475726e, 0x20655b695d282e2e, 0x2e74297d7d292877, 0x656266726f6e747c,
                0x7c2877656266726f, 0x6e743d7b7d29293b, 0x7661722077656246, 0x726f6e743d6e6577, 0x2077656266726f6e, 0x742e57656246726f, 0x6e743b0a00000000
            };
        };
    };

public:
    static std::optional<File> open(std::string_view filename) {
        if (filename == "index.html")
            return File(File::index);
        else if (filename == "favicon.ico")
            return File(File::favicon);
        else if (filename == "WebFront.js")
            return File(File::webfront);
        return {};
    }
};

class NativeFS {};

} // namespace filesystem

} // namespace webfront