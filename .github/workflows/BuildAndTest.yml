name: Build and Test

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ master develop ]

env:
  BUILD_TYPE: Release
  GIST_ID: 317c22bfe80b2b51663187fbebfba533

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        compiler: [msvc, gcc, clang]
        exclude:
        - os: windows-latest
          compiler: clang
        - os: windows-latest
          compiler: gcc
        - os: ubuntu-latest
          compiler: msvc
        - os: macos-latest
          compiler: msvc
        - os: macos-latest
          compiler: gcc
        - os: ubuntu-latest
          compiler: clang
    runs-on: ${{ matrix.os}}
    name: ${{ matrix.os }}-${{ matrix.compiler }}
      
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Clang
        uses: egor-tensin/setup-clang@v1.4
        with:
          version: 15
        if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang'

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1.3
        with:
          version: 13
        if: matrix.compiler == 'gcc'
        
      - name: Config & Build
        run: |
          cmake . -B ${{github.workspace}}/build
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  
      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest --verbose -C ${{env.BUILD_TYPE}}

      - name: Set Badge Info
        if: always() && github.ref == 'refs/heads/master'
        id: badge
        run: |
          # Set badge label
          case "${{ matrix.os }}-${{ matrix.compiler }}" in
            "windows-latest-msvc") echo "label=Windows MSVC" >> $GITHUB_OUTPUT ;;
            "ubuntu-latest-gcc") echo "label=Ubuntu GCC" >> $GITHUB_OUTPUT ;;
            "ubuntu-latest-clang") echo "label=Ubuntu Clang" >> $GITHUB_OUTPUT ;;
            *) echo "label=MacOS Clang" >> $GITHUB_OUTPUT ;;
          esac
          
          # Set badge color
          case "${{ job.status }}" in
            "success") echo "color=2EA043" >> $GITHUB_OUTPUT ;;
            "failure") echo "color=E6484F" >> $GITHUB_OUTPUT ;;
            *) echo "color=DBAB0A" >> $GITHUB_OUTPUT ;;
          esac
          
          # Set filename
          echo "filename=${{ matrix.os }}-${{ matrix.compiler }}.json" >> $GITHUB_OUTPUT
        shell: bash

      - name: Update Gist
        if: always() && github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GIST_SECRET }}
          script: |
            const filename = '${{ steps.badge.outputs.filename }}';
            const content = {
              schemaVersion: 1,
              label: '${{ steps.badge.outputs.label }}',
              message: '${{ job.status }}',
              color: '${{ steps.badge.outputs.color }}'
            };
            
            try {
              await github.rest.gists.update({
                gist_id: process.env.GIST_ID,
                files: {
                  [filename]: {
                    content: JSON.stringify(content)
                  }
                }
              });
            } catch (error) {
              core.error(`Failed to update gist: ${error.message}`);
              if (error.response) {
                core.error(`Status: ${error.response.status}`);
                core.error(`Response: ${JSON.stringify(error.response.data)}`);
              }
              throw error;
            }

      - name: Update Badge
        if: always() && github.ref == 'refs/heads/master'
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.GIST_ID }}
          filename: ${{ steps.badge.outputs.filename }}
          label: ${{ steps.badge.outputs.label }}
          message: ${{ job.status }}
          color: ${{ steps.badge.outputs.color }}

