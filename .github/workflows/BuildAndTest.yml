name: Build and Test

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ master develop ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        compiler: [msvc, gcc, clang]
        exclude:
        - os: windows-latest
          compiler: clang
        - os: windows-latest
          compiler: gcc
        - os: ubuntu-latest
          compiler: msvc
        - os: macos-latest
          compiler: msvc
        - os: macos-latest
          compiler: gcc
        - os: ubuntu-latest
          compiler: clang
    runs-on: ${{ matrix.os}}
    name: ${{ matrix.os }}-${{ matrix.compiler }}
      
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Clang
        uses: egor-tensin/setup-clang@v1.4
        with:
          version: 15
        if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang'

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1.3
        with:
          version: 13
        if: matrix.compiler == 'gcc'
        
      - name: Config & Build
        run: |
          cmake . -B ${{github.workspace}}/build
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  
      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest --verbose -C ${{env.BUILD_TYPE}}

      - name: Initialize Badge Data
        if: always() && github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          script: |
            const badgeLabel = (() => {
              switch (true) {
                case '${{ matrix.os }}' === 'windows-latest': return 'Windows MSVC';
                case '${{ matrix.os }}' === 'ubuntu-latest' && '${{ matrix.compiler }}' === 'gcc': return 'Ubuntu GCC';
                case '${{ matrix.os }}' === 'ubuntu-latest' && '${{ matrix.compiler }}' === 'clang': return 'Ubuntu Clang';
                default: return 'MacOS Clang';
              }
            })();
            
            const color = (() => {
              switch ('${{ job.status }}') {
                case 'success': return '2EA043';
                case 'failure': return 'E6484F';
                default: return 'DBAB0A';
              }
            })();
            
            const filename = '${{ matrix.os }}-${{ matrix.compiler }}.json';
            const content = {
              schemaVersion: 1,
              label: badgeLabel,
              message: '${{ job.status }}',
              color: color
            };
            
            try {
              // Try to update existing gist file
              await github.rest.gists.update({
                gist_id: '317c22bfe80b2b51663187fbebfba533',
                files: {
                  [filename]: {
                    content: JSON.stringify(content)
                  }
                }
              });
            } catch (error) {
              console.log('Error updating gist:', error);
            }

      - name: Update Badge
        if: always() && github.ref == 'refs/heads/master'
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 317c22bfe80b2b51663187fbebfba533
          filename: ${{ matrix.os }}-${{ matrix.compiler }}.json
          label: ${{ matrix.os == 'windows-latest' && 'Windows MSVC' || matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc' && 'Ubuntu GCC' || matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang' && 'Ubuntu Clang' || matrix.os == 'macos-latest' && 'MacOS Clang' }}
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && '2EA043' || job.status == 'failure' && 'E6484F' || 'DBAB0A' }}

